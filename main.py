# -*- coding: utf-8 -*-

import os
import re
import telebot
from flask import Flask, request
import google_drive_sheet
import var
import var_price
from telegraph import Telegraph

url_to_webhook = var.url_heroku_app
PORT = int(os.environ.get('PORT', 5000))
server = Flask(__name__)

#–ê–≤—Ç–æ—Ä–∏–∑—É–µ–º –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
token = var.token_telegram_bot
myBot = telebot.TeleBot(token)

#–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¢–µ–ª–µ–≥—Ä–∞—Ñ-–∞–∫–∫–∞—É–Ω—Ç–∞
telegraph = Telegraph(var.tg_access_token)

#_–†–∞–∑–¥–µ–ª-01. –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –¢–µ–ª–µ–≥—Ä–∞—Ñ (–ò–Ω—Å—Ç–∞–Ω—Ç –í—å—é)
#Creates a search result InstantView-page for the vendor code. –¢–§-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–∑-—Ç–∞ –ø–æ–∏—Å–∫–∞ 7-–∑–Ω–∞—á. –∞—Ä—Ç–∏–∫—É–ª–∞.
def tf_vendor_code(result_message):
    text_message = '–ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É: ' + '\n' + str(result_message)
    text_1 = '–ê—Ä—Ç–∏–∫—É–ª: '
    text_2 = '–¶–µ–Ω–∞: '
    content = [
        {
            'tag': 'h4',
            'children': [result_message[0]]
        },
        {
            'tag': 'h4',
            'children': [{'tag': 'strong', 'children': [text_1]}, result_message[1]]
        },
        {
            'tag': 'h4',
            'children': [{'tag': 'strong', 'children': [text_2]}, result_message[2]]
        },
        {
            'tag': 'hr'
        },
        {
            'tag': 'blockquote',
            'children': ['‚û° –ó–∞—è–≤–∫—É —Ç–∞–∫–∂–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ E-MAIL: ', {'tag': 'strong', 'children': [var.contact_mail]}]
        }
    ]

    page_title = var_price.page_title_vendor
    response = telegraph.create_page(
        title=page_title,
        content=content
    )
    page = 'http://telegra.ph/{}'.format(response['path'])
    return page

#–¢–µ–ª–µ–≥—Ä–∞—Ñ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏ (DOM-—ç–ª–µ–º–µ–Ω—Ç–∞–º–∏)
def tf_test_page():
    # text_message = '–ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É: ' + '\n' + str(result_message)

    content = [
        {
            'tag': 'p',
            'children': ['–°–µ–π—á–∞—Å —è —Ä–∞—Å—Å–∫–∞–∂—É –¥–µ–ª–∞—Ç—å ', {'tag': 'strong', 'children': ['–¥–µ–Ω—å–≥–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å']}, '. –ú—ã –º–µ—Ç–æ–¥ ']
        },
        {
            'tag': 'blockquote',
            'children': ['*C–∏–≥–Ω–∞–ª - –ø—Ä–æ–≥–Ω–æ–∑ —Ä–æ—Å—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã. üì£']
        },
        {
            'tag': 'br'
        },
        {
            'tag': 'p',
            'children': ['10% –∞–Ω—Ç–∏–ª–æ–ø–∞']
        },
        {
            'tag': 'a',
            'attrs': {'href': 'www.yandex.ru'},
            'children': ['maybe url here']
        },
        {
            'tag': 'hr'
        },
        {
            'tag': 'p',
            'children': ['30% –∞–Ω—Ç–∏–ª–æ–ø–∞']
        }
    ]

    response = telegraph.create_page(
        title='testing',
        content=content
    )
    page = 'http://telegra.ph/{}'.format(response['path'])
    return page

#Create InsView-page from data list. –¢–µ–ª–µ–≥—Ä–∞—Ñ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ: –Ω–∞—á–∞–ª–æ-—Å–µ—Ä–µ–¥–∏–Ω–∞-–∫–æ–Ω–µ—Ü. (ps: –Ω–∞–¥–æ –¥–æ–¥–µ–ª–∞—Ç—å)
def tf_page_ranks(dict_ranks):
    page_title = var_price.page_title_rank
    page_content = []
    content_start = [
        {
            'tag': 'blockquote',
            'children': ['–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –∏ ', {'tag': 'strong', 'children': ['–∫–ª–∏–∫–Ω–∏—Ç–µ']},
                         ', —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤']
        },
        {
            'tag': 'hr'
        }
    ]
    page_content.extend(content_start)

    content_main = []
    for y in range(len(dict_ranks)):
        score = str(y+1)
        rank_title = dict_ranks[y]['title']
        row = score + '. ' + rank_title
        data = {
            'tag': 'h3',
            'children': [row]
        }
        content_main.append(data)
    page_content.extend(content_main)

    content_end = [
        {
            'tag': 'hr'
        },
        {
            'tag': 'blockquote',
            'children': ['‚û° –ó–∞—è–≤–∫—É —Ç–∞–∫–∂–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ E-MAIL: ', {'tag': 'strong', 'children': ['mail@mail.om']}]
        }
    ]
    page_content.extend(content_end)

    response = telegraph.create_page(
        title=page_title,
        content=page_content
    )
    page = 'http://telegra.ph/{}'.format(response['path'])
    return page

#_–†–∞–∑–¥–µ–ª-02. –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –¢–µ–ª–µ–≥—Ä–∞–º –ë–æ—Ç–æ–º.
#_–ö–æ–º–∞–Ω–¥—ã –ë–æ—Ç–∞ –¥–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ –≤–Ω–∞—á–∞–ª–µ –∫–æ–¥–∞.
@myBot.message_handler(commands=['start'])
def send_welcome(message):
    myBot.reply_to(message, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å') #TODO: change text

@myBot.message_handler(commands=['help'])
def send_help(message):
    myBot.reply_to(message, '–†–∞–∑–¥–µ–ª –ü–æ–º–æ—â–∏: –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞') #TODO: change text

@myBot.message_handler(commands=['price'])
def send_menu_category(message):
    # msg_answer = tf_page_ranks(google_drive_sheet.get_all_ranks())    #–ó–¥–µ—Å—å —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å –Ω—É–ª—è —Å–æ–∑–¥–∞—Ç—å, –Ω–æ –Ω–∞–¥–æ –∂–¥–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å
    tf_page_path = google_drive_sheet.get_cell_value('D1')  #–ê —Ç–∞–∫ –±—ã—Å—Ç—Ä–µ–µ: —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥–æ—Ç–æ–≤—ã–µ –¢–§-—Å—Ç—Ä–∞–Ω–∏—Ü—ã
    # tf_page_path = var_price.page_rank
    msg_answer = tf_page_path
    myBot.reply_to(message, msg_answer)

@myBot.message_handler(commands=['dvigateli'])
def send_menu_category(message):
    tf_page_path = var_price.page_motors
    msg_answer = tf_page_path
    myBot.reply_to(message, msg_answer)

@myBot.message_handler(func=lambda message: True)
def handle_text(message):
    # –Ω–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (7-–∑–Ω–∞—á–Ω—ã–π –ê—Ä—Ç–∏–∫—É–ª)
    vendor_found = re.search(r'\d{7}', str(message.text))
    if vendor_found:
        myBot.send_message(message.from_user.id, "–ù–∞–π–¥–µ–Ω –∞—Ä—Ç–∏–∫—É–ª: " + str(vendor_found.group(0))
                           + '. –ò–¥—ë—Ç –ø–æ–∏—Å–∫ –≤ –ø—Ä–∞–π—Å–µ.')

        #–ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –≤ –ü—Ä–∞–π—Å–µ –ø–æ –¥–∞–Ω–Ω–æ–º—É –ê—Ä—Ç–∏–∫—É–ª—É
        result_found = google_drive_sheet.find_by_sheet(vendor_found.group(0))
        # myBot.send_message(message.from_user.id, '–†–µ–∑—É–ª—å—Ç–∞—Ç: ' + str(result_found))
        myBot.send_message(message.from_user.id, tf_vendor_code(result_found))
    else:
        myBot.send_message(message.from_user.id, '–í–∞—à —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 7-–∑–Ω–∞—á–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª')

# @server.route("/")
# def main():
#     #–°—Ç–∞—Ä—Ç—É–µ–º –ë–æ—Ç
#     myBot.polling(none_stop=True, interval=0)
#
# if __name__ == '__main__':
#     main()

#–ù–∏–∂–µ —ç—Ç–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —á/–∑ Heroku
@server.route('/' + token, methods=['POST'])
def get_message():
    myBot.process_new_updates([telebot.types.Update.de_json(request.stream.read().decode("utf-8"))])
    return "POST", 200

@server.route("/")
def web_hook():
    myBot.remove_webhook()
    myBot.set_webhook(url=url_to_webhook + token)
    return "CONNECTED", 200

server.run(host="0.0.0.0", port=PORT, debug=True)
